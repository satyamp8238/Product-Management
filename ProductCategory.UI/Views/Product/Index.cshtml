@model ProductCategory.UI.Models.ProductListViewModel

@{
    ViewData["Title"] = "Products";

    int startRecord = ((Model.PageNumber - 1) * Model.PageSize) + 1;
    int endRecord = Math.Min(startRecord + Model.Products.Count - 1, Model.TotalCount);
}

<div class="container mt-5">

    <!-- 🔹 Heading + Page Size Dropdown -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h3 class="fw-bold mb-0">🛍️ Products</h3>

        <div class="d-flex gap-2 align-items-center">
            <button class="btn btn-primary btn-sm" onclick="openAddProductModal()">➕ Add Product</button>

        </div>
    </div>


    <!-- 🔹 Product Table -->
    <table class="table table-hover table-bordered align-middle">
        <thead class="table-light">
            <tr>
                <th>Name</th>
                <th>Price (₹)</th>
                <th>Category</th>
                <th class="text-center">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in Model.Products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Price.ToString("N2")</td>
                    <td>@product.Category?.Name</td>
                    <td class="text-center">
                        @* <a class="btn btn-sm btn-outline-primary me-1" href="/Product/Edit/@product.ProductId">Edit</a> *@
                        <button class="btn btn-sm btn-outline-primary me-1 edit-btn"
                                data-id="@product.ProductId"
                                data-name="@product.Name"
                                data-description="@product.Description"
                                data-price="@product.Price"
                                data-categoryid="@product.CategoryId">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-outline-danger delete-btn" data-id="@product.ProductId">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- 🔹 Pagination -->
    @{
        int totalPages = Model.TotalPages;
        int currentPage = Model.PageNumber;
        int pageSize = Model.PageSize;

        // Define how many pages to show
        int maxVisiblePages = 5;
        int startPage = Math.Max(1, currentPage - maxVisiblePages / 2);
        int endPage = Math.Min(totalPages, startPage + maxVisiblePages - 1);

        // Adjust if we're near the end
        if (endPage - startPage < maxVisiblePages - 1)
        {
            startPage = Math.Max(1, endPage - maxVisiblePages + 1);
        }
    }

    <div class="d-flex justify-content-between align-items-center">
        <div class="text-muted small">
            <div class="d-flex flex-wrap justify-content-between align-items-center mb-3">
                <form method="get" class="d-flex align-items-center">
                    <label for="pageSize" class="me-2 mb-0 fw-semibold">Page Size:</label>
                    <select name="pageSize" id="pageSize" class="form-select form-select-sm w-auto me-2" onchange="this.form.submit()">
                        <option value="5" selected="@(Model.PageSize == 5 ? "selected" : null)">5</option>
                        <option value="10" selected="@(Model.PageSize == 10 ? "selected" : null)">10</option>
                        <option value="20" selected="@(Model.PageSize == 20 ? "selected" : null)">20</option>
                        <option value="50" selected="@(Model.PageSize == 50 ? "selected" : null)">50</option>
                    </select>
                    <input type="hidden" name="page" value="1" />
                </form>

                <div class="ms-auto text-end">
                    Showing <strong>@startRecord</strong> to <strong>@endRecord</strong> of <strong>@Model.TotalCount</strong> entries
                </div>
            </div>
        </div>


        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <!-- Previous button -->
                <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                    <a class="page-link" href="?page=@(currentPage - 1)&pageSize=@pageSize" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>

                <!-- Page numbers (max 5) -->
                @for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == currentPage ? "active" : "")">
                        <a class="page-link" href="?page=@i&pageSize=@pageSize">@i</a>
                    </li>
                }

                <!-- Next button -->
                <li class="page-item @(currentPage >= totalPages ? "disabled" : "")">
                    <a class="page-link" href="?page=@(currentPage + 1)&pageSize=@pageSize" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>


    <!-- 🟩 Add/Edit Product Modal -->
    <div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <form id="productForm" novalidate>
                    <input type="hidden" id="productId" name="productId" />
                    <div class="modal-header">
                        <h5 class="modal-title" id="addProductModalLabel">➕ Add New Product</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">
                        <!-- 🔤 Product Name -->
                        <div class="mb-3">
                            <label for="productName" class="form-label">Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="productName" name="productName" required />
                            <div class="invalid-feedback">Product Name is required.</div>
                        </div>

                        <!-- 💲 Price -->
                        <div class="mb-3">
                            <label for="price" class="form-label">Price <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="price" name="price" step="0.01" required />
                            <div class="invalid-feedback">Price is required.</div>
                        </div>

                        <!-- 🧾 Description -->
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="3"></textarea>
                        </div>

                        <!-- 🧩 Category Dropdown -->
                        <div class="mb-3">
                            <label for="categoryId" class="form-label">Category <span class="text-danger">*</span></label>
                            <select class="form-select" id="categoryId" name="categoryId" required>
                                <option value="">-- Select Category --</option>
                                <!-- Fill this dynamically -->
                            </select>
                            <div class="invalid-feedback">Category is required.</div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary btn-sm" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary btn-sm">Save Product</button>
                    </div>
                </form>
            </div>
        </div>
    </div>


</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            const modal = new bootstrap.Modal($('#addProductModal')[0]);

            function loadCategoriesDropdown(selectedId = "", callback = null) {
                $.get('/Product/GetCategories', function (data) {
                    const $category = $('#categoryId');
                    $category.empty().append('<option value="">-- Select Category --</option>');
                    $.each(data, function (i, cat) {
                        $category.append(`<option value="${cat.CategoryId}">${cat.Name}</option>`);
                    });
                    if (selectedId) $category.val(selectedId);
                    if (callback) callback();
                });
            }

            $('#productForm').on('submit', function (e) {
                e.preventDefault();
                if (!this.checkValidity()) {
                    $(this).addClass('was-validated');
                    return;
                }

                const product = {
                    productId: $('#productId').val() || "00000000-0000-0000-0000-000000000000",
                    name: $('#productName').val(),
                    description: $('#description').val(),
                    price: parseFloat($('#price').val()),
                    categoryId: $('#categoryId').val()
                };

                $.ajax({
                    url: '/Product/AddOrEditProduct',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(product),
                    success: function (data) {
                        alert(`Product ${data.status} successfully.`);
                        location.reload();
                    },
                    error: function () {
                        alert('Something went wrong.');
                    }
                });
            });

            $('#addProductModal').on('hidden.bs.modal', function () {
                $('#productForm')[0].reset();
                $('#productForm').removeClass('was-validated');
                $('#productId').val('');
                $('#addProductModalLabel').text('Add Product');
            });

            window.openAddProductModal = function () {
                loadCategoriesDropdown();
                $('#addProductModalLabel').text('Add Product');
                modal.show();
            };

            window.editProduct = function (product) {
                $('#productId').val(product.productId);
                $('#productName').val(product.name);
                $('#description').val(product.description);
                $('#price').val(product.price);

                loadCategoriesDropdown(product.categoryId, function () {
                    $('#addProductModalLabel').text('Edit Product');
                    modal.show();
                });
            };

            $(document).on('click', '.edit-btn', function () {
                const product = {
                    productId: $(this).data('id'),
                    name: $(this).data('name'),
                    description: $(this).data('description'),
                    price: $(this).data('price'),
                    categoryId: $(this).data('categoryid')
                };
                editProduct(product);
            });

            $(document).on('click', '.delete-btn', function () {
                const id = $(this).data('id');

                if (confirm("Are you sure you want to delete this product?")) {
                    $.ajax({
                        url: '@Url.Action("DeleteProduct", "Product")' + '?id=' + id,
                        type: 'DELETE',
                        success: function (data) {
                            alert(data.message); 
                            location.reload();
                        },
                        error: function (xhr) {
                            const err = xhr.responseJSON?.message || 'Something went wrong.';
                            alert(err);
                        }
                    });
                }
            });


        });
    </script>

}